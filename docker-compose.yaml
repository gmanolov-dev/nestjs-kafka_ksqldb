version: "3.9"
networks: 
  kafka-network:
    name: kafka
  web-network:
    name: web
  mongo-network:
    name: mongo

services:
  coingase-feed:
    build: 
      context: .
      dockerfile: .docker-compose/Dockerfile-coninbase-feed
    image: coinbase-feed
    depends_on: 
      - broker
    environment:
      - NODE_ENV=docker
    networks: 
      - kafka-network
      - web-network

  configurator:
    hostname: configurator
    container_name: configurator
    build: 
      context: .
      dockerfile: .docker-compose/Dockerfile-configurator
    image: configurator
    depends_on: 
      - mongodb
      - broker
    environment:
      - NODE_ENV=docker
    networks: 
      - kafka-network
      - web-network
      - mongo-network

  message-listener:
    build: 
      context: .
      dockerfile: .docker-compose/Dockerfile-message-listener
    image: message-listener
    depends_on: 
      - ksqldb-server
    environment:
      - NODE_ENV=docker
    # ports: 
    #   - 3001:3001
    deploy:
      mode: replicated
      replicas: 3
    networks: 
      - kafka-network
      - web-network

  web-interface:
    build: 
      context: .
      dockerfile: .docker-compose/Dockerfile-webapp
    image: web-interface
    ports:
      - 8080:80
    networks: 
      - web-network
    depends_on: 
      - message-listener
      - configurator
    # mounting it here doesn't work. need some more time to investigate
    # will move it to the docker file (Dockerfile-webapp)
    # volumes: 
    #   - $PWD/.docker-compose/nginx/nginx.conf /etc/nginx/nginx.conf
  
# Infrastructure
# Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper-prod
    container_name: zookeeper-prod
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: 
      - kafka-network

  broker:
    image: confluentinc/cp-server:6.2.0
    hostname: broker-prod
    container_name: broker-prod
    depends_on:
      - zookeeper
    # ports:
    #   - "9092:9092"
    #   - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_JMX_PORT: 9101
      # KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks: 
      - kafka-network
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.17.0
    hostname: ksqldb-server-prod
    container_name: ksqldb-server-prod
    command: sh -c "sleep 20 && /usr/bin/docker/run"
    depends_on:
      - broker
    ports:
      - "8088:8088"
    volumes: 
      - $PWD/.docker-compose/ksqldb/ksql.init.sql:/etc/ksqldb/ksql.init.sql
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_KSQL_SERVICE_ID: "ksqldb_standalone"
      # KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_SUPPRESS_ENABLED: 'true'
      KSQL_KSQL_QUERIES_FILE: '/etc/ksqldb/ksql.init.sql'
    networks: 
      - kafka-network
  # Mongo
  mongodb:
    hostname: mongo-prod
    container_name: mongo-prod
    image: mongo:4.4.5
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root123!
      MONGO_INITDB_DATABASE: configurator
      MONGO_INITDB_USERNAME: root
      MONGO_INITDB_PASSWORD: root123!
    ports:
    - "27017-27019:27017-27019"
      # - 27017:27017
    volumes:
      - $PWD/.docker-compose/mongo/mongo-replica-set-keyfile.key:/data/replica.key.1
      - $PWD/.docker-compose/mongo/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
    entrypoint:
        - bash
        - -c
        - |
            cp /data/replica.key.1 /data/replica.key
            chmod 400 /data/replica.key
            chown 999:999 /data/replica.key
            exec docker-entrypoint.sh $$@     
    command: "mongod --bind_ip_all --replSet rs0 --keyFile /data/replica.key"
    networks: 
      - mongo-network
